#!/usr/bin/env bash
# Author: Juan Medina
# Date: Mar 2025
# Description: Initializes the Mid-Term or Final test environment for the Linux class.
#              This script is expected to be run with sudo.

# Exit immediately if a command exits with a non-zero status.
set -e
# Treat unset variables as an error when substituting.
set -u
# Cause pipelines to return the exit status of the last command that failed.
set -o pipefail

# --- Script Arguments ---
# $1: version (midterm|final)
# $2: student_id (numeric)
# $3: username (student's username)

if [[ "$#" -ne 3 ]]; then
    echo "Error: This script requires 3 arguments: <version> <student_id> <username>" >&2
    exit 1
fi

readonly version="${1}"
readonly student_id="${2}"
readonly username="${3}"

# --- Configuration ---

# Use mktemp to create a secure temporary file for the exam text
# This script runs as root, so the temp file will be owned by root.
readonly textfile=$(mktemp /tmp/exam.XXXXXX.yml)

# Ensure the temporary file is removed when the script exits (or on error/interrupt)
trap 'rm -f "${textfile}"' EXIT

# Quotes for the final exam's stressor log message
readonly quotes=(
    "stress-ng - The future belongs to those who believe in the beauty of their dreams."
    "stress-ng - Success is the sum of small efforts, repeated day in and day out."
    "stress-ng - Don't watch the clock; do what it does. Keep going."
    "stress-ng - You are never too old to set another goal or to dream a new dream."
    "stress-ng - The harder you work for something, the greater you'll feel when you achieve it."
    "stress-ng - Your time is limited, don't waste it living someone else's life."
    "stress-ng - Dream big, work hard, stay focused, and surround yourself with good people."
    "stress-ng - The pain you feel today will be the strength you feel tomorrow."
    "stress-ng - Don't stop until you're proud."
    "stress-ng - You don't have to be great to start, but you have to start to be great."
    "stress-ng - Believe you can, and you're halfway there."
    "stress-ng - Push yourself, because no one else is going to do it for you."
    "stress-ng - The only way to do great work is to love what you do."
    "stress-ng - Strive for progress, not perfection."
    "stress-ng - You are capable of more than you know."
    "stress-ng - Don't let what you cannot do interfere with what you can do."
    "stress-ng - Small steps every day lead to big results over time."
    "stress-ng - The key to success is to focus on goals, not obstacles."
    "stress-ng - Your education is a dress rehearsal for the life you want to lead."
    "stress-ng - Keep your eyes on the stars and your feet on the ground."
)

# --- Text Generation Functions ---

# --- Text Generation Functions ---

midterm_text() {
echo "
#=========================================================================
#                        C O L L I N   C O L L E G E
#                          M I D T E R M   E X A M
# Student: ${username} (ID: ${student_id})
#=========================================================================

You are a Linux System Administrator at TuxQuack, Inc.

Your company is preparing for a major system upgrade, and you have
been tasked with setting up a new server environment, managing
users and groups, and ensuring proper file permissions and backups.

Your goal is to complete the following tasks to demonstrate your skills.

#===========================
#         Challenge
#===========================

1. Create a new user with the username:
    'midterm_${username}'

2. Add this user to the supplementary group 'wheel'.

3. Set the password for the 'midterm_${username}' user to:
    'password123!'

4. Create a directory named:
    '/tuxquack-reports-${student_id}/'

5. Inside this directory, create a subdirectory for every month of the year
   (e.g., 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec').

6. In the subdirectory corresponding to the current month, create a file named:
    'system-report-${username}.ini'

7. Populate the 'system-report-${username}.ini' file using the
   following format and completing the requested information by replacing
   the bracketed placeholders with actual system data:

'''
[general]
HOSTNAME: <hostname>
TOTAL_CPUS: <total count of CPUs>

[users]
LOGIN_USERS: <count of users that can log in to the system (e.g., have a valid shell)>
NO_LOGIN_USERS: <count of users with a nologin shell (e.g., /sbin/nologin, /bin/false)>
WHEEL_USERS: <count of users in the wheel group>
'''

8. Set the permissions for the '/tuxquack-reports-${student_id}/' directory
   and all files and subdirectories within it so that only the owner
   (root, since you are performing these tasks as root or via sudo)
   has read, write, and execute permissions (rwx------). Other users
   should have no permissions.

9. Create another user named 'security-${username}', with the GECOS comment
   'Security Auditor' and make this user a member of a new supplementary
   group named 'auditors'.

10. Set the password for the user 'security-${username}' to 'P4ssw0rd!'.

11. Grant the 'security-${username}' user passwordless sudo access for all commands.
    Create a custom sudoers file in '/etc/sudoers.d/' named 'security-${username}'
    with the following content:

    security-${username} ALL=(ALL) NOPASSWD:ALL

#===========================
# Verification Instructions
#===========================

1. Once all tasks are completed, run the following command IN THE RIGHT-HAND TERMINAL PANE:

   testchecker ${version}

2. Submit evidence of the verification by copying and pasting
   the entire output of the testchecker to Canvas as a TEXT ENTRY.

#          ~~~~~ Press 'q' to quit this view (left pane) and get a shell. ~~~~~
#                      ~~~~~ USE Ctrl+x CLOSE THIS WINDOW ~~~~~
"
}


final_text() {
# Note: ${username} and ${student_id} are available here due to script scope
echo "
#=========================================================================
#                        C O L L I N   C O L L E G E
#                            F I N A L   E X A M
# Student: ${username} (ID: ${student_id})
#=========================================================================

You are a Linux System Administrator at TuxQuack, Inc.

Your company is experiencing performance issues that you need to diagnose,
fix and prevent in the future. A stress-ng process has been started.

Your goal is to complete the following tasks to demonstrate your skills.

#===========================
#         Challenge
#===========================

1.  Identify the Parent Process ID ('PPID') of the 'stress-ng' process
    that is stressing the system.

2.  Determine which primary system resource ('CPU', 'MEMORY', or 'IO')
    is being most impacted by the 'stress-ng' process. (Hint: Check the
    journal for a message from the stress script).

3.  Identify the full path to the largest file currently open 'lsof'
    by the 'stress-ng' process.

4.  Use 'journalctl' to find the emergency '(emerg)' level log message
    generated by the 'stress-ng' process.

5.  Create a report file named '~/performance-report-${username}.yml'
    (in your regular user's home directory, e.g., /home/${username}/...)
    with the following YAML format, replacing bracketed placeholders:

    process:
      PID: <Actual PID of stress-ng>
      PPID: <Actual PPID found in step 1>
      NAME: <Command name of the stress-ng process>
      RESOURCE_IMPACTED: <CPU, MEMORY, or IO from step 2>
      LARGEST_OPEN_FILE: <Full path to largest open file from step 3>
      LOGGED_MESSAGE: <The exact emergency log message from step 4, without timestamp/hostname>

6.  Install the 'Apache Web Server' package (httpd).

7.  Use 'systemctl' to both 'enable' and 'start' the 'httpd.service' immediately.

8.  Copy your '~/performance-report-${username}.yml' file
    to the Apache web server's default document root directory ('/var/www/html/').

9.  Ensure the copied report file in '/var/www/html/' is owned by the
    'apache' user and the 'apache' group.

10. Verify that you can access your report via a web browser or using 'curl' 
    from the command line at:

    curl -k http://localhost/performance-report-${username}.yml

#===========================
# Verification Instructions
#===========================

1. Once all tasks are completed, run the following command IN THE RIGHT-HAND TERMINAL PANE:

   testchecker ${version}

2. Submit evidence of the verification by copying and pasting
   the entire output of the testchecker to Canvas as a TEXT ENTRY.

# ~~~~~ Press 'q' to quit this view (left pane) and get a shell. ~~~~~
#          ~~~~~ USE Ctrl+x CLOSE THIS WINDOW ~~~~~
"
}

# --- Setup Functions ---

function setup_midterm(){
    echo "Setting up Midterm environment..."
    midterm_text > "${textfile}"
    # Set permissions: readable by owner (root) only, as less will run as root.
    chmod 600 "${textfile}"
    echo "Midterm instructions written to ${textfile}"
}

function setup_final(){
    echo "Setting up Final Exam environment..."
    final_text > "${textfile}"
    # Set permissions: readable by owner (root) only.
    chmod 600 "${textfile}"
    echo "Final Exam instructions written to ${textfile}"

    # Start stress-ng for the final exam
    if ! command -v stress-ng &>/dev/null; then
        dnf install -y -q stress-ng || { echo "Failed to install stress-ng. Final exam may not function as expected." >&2; }
    fi

    if command -v stress-ng &>/dev/null; then
        /usr/bin/stress-ng -q --timeout 3600 -c 1 --oom-avoid &>/dev/null & disown
        # Log a message for students to find
        local random_quote="${quotes[$((RANDOM % ${#quotes[@]}))]}"
        /usr/bin/logger -t "FINAL-EXAM-STRESS" "${random_quote}" -p user.emerg
    else
        echo "stress-ng is not available. Performance analysis part of the exam will be affected." >&2
    fi
}

# --- Main Logic ---

# Select and run setup based on version
case "${version}" in
    "midterm")
        setup_midterm
        ;;
    "final")
        setup_final
        ;;
    *)
        echo "Error: Invalid version '${version}'. Expected 'midterm' or 'final'." >&2
        rm -f "${textfile}" 
        exit 1
        ;;
esac

echo "Launching exam environment in Terminator..."
sleep 3

# Launch Terminator in fullscreen, borderless, with a title.
terminator -f -b -T "Linux Exam" -l exam

# terminator -f -b -T "Linux Exam (${version^}) - Student: ${username}" \
#     -e "bash -c 'echo -e \"\n\nWelcome, ${username}! This is the ${version} exam.\n\nExam instructions are displayed using less.\n ==> Press '\''q'\'' to quit less and activate this terminal pane.\n ==> Or, you can work directly in the right-hand terminal pane.\n\nGood luck!\n\n\"; less \"${textfile}\"; exec bash'" \
#     --split-right \
#     -e "bash -c 'echo -e \"\n\nWorking terminal for ${username} - ${version} exam.\nRun '\''sudo testchecker ${version}'\'' here when ready.\n\"; exec bash'"

# Script finishes here. Terminator runs independently.
